
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00000a62  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  0080021c  0080021c  00000b12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137a  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed4  00000000  00000000  00001fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000730  00000000  00000000  00002e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ab  00000000  00000000  00003d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000422a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c1       	rjmp	.+796    	; 0x3ae <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e6       	ldi	r30, 0x62	; 98
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ac e1       	ldi	r26, 0x1C	; 28
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 35       	cpi	r26, 0x5A	; 90
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	9e c4       	rjmp	.+2364   	; 0xa5e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "include/uart1.h"
#include <stdio.h>
#include <avr/interrupt.h>
#include <avr/io.h>

int main() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	
	uart_init(); // 57600
 128:	fa d0       	rcall	.+500    	; 0x31e <uart_init>
	uart1_init(); // Initialize UART, Baud Rate 9600
 12a:	0d d1       	rcall	.+538    	; 0x346 <uart1_init>
	sei(); // Enable Interrupts
 12c:	78 94       	sei

	char *received_str = uart1_rx_string(); // receive by calling rx function
 12e:	7f d1       	rcall	.+766    	; 0x42e <uart1_rx_string>
 130:	d8 2f       	mov	r29, r24
 132:	c9 2f       	mov	r28, r25
 134:	9f 93       	push	r25
	printf("%s\r\n", received_str);
 136:	8f 93       	push	r24
 138:	8e e0       	ldi	r24, 0x0E	; 14
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	9f 93       	push	r25
 13e:	8f 93       	push	r24
 140:	ce d1       	rcall	.+924    	; 0x4de <printf>
	uart1_tx_string(received_str); // send the received string
 142:	8d 2f       	mov	r24, r29
 144:	9c 2f       	mov	r25, r28
 146:	12 d1       	rcall	.+548    	; 0x36c <uart1_tx_string>
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <uart_putchar>:
 15a:	cf 93       	push	r28
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 15c:	c8 2f       	mov	r28, r24

  if (c == '\a')
 15e:	87 30       	cpi	r24, 0x07	; 7
 160:	61 f4       	brne	.+24     	; 0x17a <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
 162:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <__iob+0x4>
 166:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <__iob+0x5>
 16a:	47 e0       	ldi	r20, 0x07	; 7
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	83 e1       	ldi	r24, 0x13	; 19
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	71 d1       	rcall	.+738    	; 0x45a <fwrite>
      return 0;
 178:	0a c0       	rjmp	.+20     	; 0x18e <uart_putchar+0x34>
    }

  if (c == '\n')
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	11 f4       	brne	.+4      	; 0x182 <uart_putchar+0x28>
    uart_putchar('\r', stream);
 17e:	8d e0       	ldi	r24, 0x0D	; 13
 180:	ec df       	rcall	.-40     	; 0x15a <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 182:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 186:	85 ff       	sbrs	r24, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <uart_putchar+0x28>
  UDR0 = c;
 18a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

  return 0;
}
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 1a2:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <rxp.2118>
 1a6:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <rxp.2118+0x1>
 1aa:	23 2b       	or	r18, r19
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <uart_getchar+0x1a>
 1ae:	95 c0       	rjmp	.+298    	; 0x2da <uart_getchar+0x144>
 1b0:	8c 01       	movw	r16, r24
 1b2:	cc e1       	ldi	r28, 0x1C	; 28
 1b4:	d2 e0       	ldi	r29, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 1b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1ba:	99 23       	and	r25, r25
 1bc:	e4 f7       	brge	.-8      	; 0x1b6 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 1be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1c2:	84 fd       	sbrc	r24, 4
 1c4:	9d c0       	rjmp	.+314    	; 0x300 <uart_getchar+0x16a>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 1c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1ca:	83 fd       	sbrc	r24, 3
 1cc:	9c c0       	rjmp	.+312    	; 0x306 <uart_getchar+0x170>
	  return _FDEV_ERR;
	c = UDR0;
 1ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 1d2:	8d 30       	cpi	r24, 0x0D	; 13
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <uart_getchar+0x42>
	  c = '\n';
 1d6:	8a e0       	ldi	r24, 0x0A	; 10
	if (c == '\n')
 1d8:	8a 30       	cpi	r24, 0x0A	; 10
 1da:	51 f4       	brne	.+20     	; 0x1f0 <uart_getchar+0x5a>
	  {
	    *cp = c;
 1dc:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
 1de:	b8 01       	movw	r22, r16
 1e0:	bc df       	rcall	.-136    	; 0x15a <uart_putchar>
	    rxp = b;
 1e2:	8c e1       	ldi	r24, 0x1C	; 28
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <rxp.2118+0x1>
 1ea:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <rxp.2118>
	    break;
 1ee:	75 c0       	rjmp	.+234    	; 0x2da <uart_getchar+0x144>
	  }
	else if (c == '\t')
 1f0:	89 30       	cpi	r24, 0x09	; 9
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <uart_getchar+0x60>
	  c = ' ';
 1f4:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 1f6:	90 ee       	ldi	r25, 0xE0	; 224
 1f8:	98 0f       	add	r25, r24
 1fa:	9f 35       	cpi	r25, 0x5F	; 95
 1fc:	10 f0       	brcs	.+4      	; 0x202 <uart_getchar+0x6c>
 1fe:	80 3a       	cpi	r24, 0xA0	; 160
 200:	88 f0       	brcs	.+34     	; 0x224 <uart_getchar+0x8e>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	cb 36       	cpi	r28, 0x6B	; 107
 206:	d9 07       	cpc	r29, r25
 208:	21 f4       	brne	.+8      	; 0x212 <uart_getchar+0x7c>
	      uart_putchar('\a', stream);
 20a:	b8 01       	movw	r22, r16
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	a5 df       	rcall	.-182    	; 0x15a <uart_putchar>
 210:	d2 cf       	rjmp	.-92     	; 0x1b6 <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
 212:	7e 01       	movw	r14, r28
 214:	ef ef       	ldi	r30, 0xFF	; 255
 216:	ee 1a       	sub	r14, r30
 218:	fe 0a       	sbc	r15, r30
		uart_putchar(c, stream);
 21a:	88 83       	st	Y, r24
 21c:	b8 01       	movw	r22, r16
 21e:	9d df       	rcall	.-198    	; 0x15a <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 220:	e7 01       	movw	r28, r14
		uart_putchar(c, stream);
	      }
	    continue;
 222:	c9 cf       	rjmp	.-110    	; 0x1b6 <uart_getchar+0x20>
	  }

	switch (c)
 224:	82 31       	cpi	r24, 0x12	; 18
 226:	01 f1       	breq	.+64     	; 0x268 <uart_getchar+0xd2>
 228:	30 f4       	brcc	.+12     	; 0x236 <uart_getchar+0xa0>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	09 f4       	brne	.+2      	; 0x230 <uart_getchar+0x9a>
 22e:	6e c0       	rjmp	.+220    	; 0x30c <uart_getchar+0x176>
 230:	88 30       	cpi	r24, 0x08	; 8
 232:	49 f0       	breq	.+18     	; 0x246 <uart_getchar+0xb0>
 234:	c0 cf       	rjmp	.-128    	; 0x1b6 <uart_getchar+0x20>
 236:	87 31       	cpi	r24, 0x17	; 23
 238:	09 f4       	brne	.+2      	; 0x23c <uart_getchar+0xa6>
 23a:	43 c0       	rjmp	.+134    	; 0x2c2 <uart_getchar+0x12c>
 23c:	8f 37       	cpi	r24, 0x7F	; 127
 23e:	19 f0       	breq	.+6      	; 0x246 <uart_getchar+0xb0>
 240:	85 31       	cpi	r24, 0x15	; 21
 242:	79 f1       	breq	.+94     	; 0x2a2 <uart_getchar+0x10c>
 244:	b8 cf       	rjmp	.-144    	; 0x1b6 <uart_getchar+0x20>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 246:	f2 e0       	ldi	r31, 0x02	; 2
 248:	cc 31       	cpi	r28, 0x1C	; 28
 24a:	df 07       	cpc	r29, r31
 24c:	09 f0       	breq	.+2      	; 0x250 <uart_getchar+0xba>
 24e:	08 f4       	brcc	.+2      	; 0x252 <uart_getchar+0xbc>
	      {
		uart_putchar('\b', stream);
 250:	b2 cf       	rjmp	.-156    	; 0x1b6 <uart_getchar+0x20>
 252:	b8 01       	movw	r22, r16
 254:	88 e0       	ldi	r24, 0x08	; 8
		uart_putchar(' ', stream);
 256:	81 df       	rcall	.-254    	; 0x15a <uart_putchar>
 258:	b8 01       	movw	r22, r16
 25a:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 25c:	7e df       	rcall	.-260    	; 0x15a <uart_putchar>
 25e:	b8 01       	movw	r22, r16
 260:	88 e0       	ldi	r24, 0x08	; 8
		cp--;
 262:	7b df       	rcall	.-266    	; 0x15a <uart_putchar>
 264:	21 97       	sbiw	r28, 0x01	; 1
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 266:	a7 cf       	rjmp	.-178    	; 0x1b6 <uart_getchar+0x20>
 268:	b8 01       	movw	r22, r16
 26a:	8d e0       	ldi	r24, 0x0D	; 13
 26c:	76 df       	rcall	.-276    	; 0x15a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 26e:	0f 2e       	mov	r0, r31
 270:	fc e1       	ldi	r31, 0x1C	; 28
 272:	ef 2e       	mov	r14, r31
 274:	f2 e0       	ldi	r31, 0x02	; 2
 276:	ff 2e       	mov	r15, r31
 278:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 27a:	05 c0       	rjmp	.+10     	; 0x286 <uart_getchar+0xf0>
 27c:	b8 01       	movw	r22, r16
 27e:	f7 01       	movw	r30, r14
 280:	81 91       	ld	r24, Z+
 282:	7f 01       	movw	r14, r30
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 284:	6a df       	rcall	.-300    	; 0x15a <uart_putchar>
 286:	ec 16       	cp	r14, r28
 288:	fd 06       	cpc	r15, r29
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 28a:	c0 f3       	brcs	.-16     	; 0x27c <uart_getchar+0xe6>
 28c:	94 cf       	rjmp	.-216    	; 0x1b6 <uart_getchar+0x20>
 28e:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	63 df       	rcall	.-314    	; 0x15a <uart_putchar>
 294:	b8 01       	movw	r22, r16
 296:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 298:	60 df       	rcall	.-320    	; 0x15a <uart_putchar>
 29a:	b8 01       	movw	r22, r16
 29c:	88 e0       	ldi	r24, 0x08	; 8
		cp--;
 29e:	5d df       	rcall	.-326    	; 0x15a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 2a0:	21 97       	sbiw	r28, 0x01	; 1
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	cc 31       	cpi	r28, 0x1C	; 28
 2a6:	df 07       	cpc	r29, r31
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 2a8:	09 f0       	breq	.+2      	; 0x2ac <uart_getchar+0x116>
 2aa:	88 f7       	brcc	.-30     	; 0x28e <uart_getchar+0xf8>
 2ac:	84 cf       	rjmp	.-248    	; 0x1b6 <uart_getchar+0x20>
 2ae:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	53 df       	rcall	.-346    	; 0x15a <uart_putchar>
 2b4:	b8 01       	movw	r22, r16
 2b6:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 2b8:	50 df       	rcall	.-352    	; 0x15a <uart_putchar>
 2ba:	b8 01       	movw	r22, r16
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	4d df       	rcall	.-358    	; 0x15a <uart_putchar>
		cp--;
 2c0:	21 97       	sbiw	r28, 0x01	; 1
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	cc 31       	cpi	r28, 0x1C	; 28
 2c6:	d8 07       	cpc	r29, r24
 2c8:	09 f0       	breq	.+2      	; 0x2cc <uart_getchar+0x136>
 2ca:	08 f4       	brcc	.+2      	; 0x2ce <uart_getchar+0x138>
 2cc:	74 cf       	rjmp	.-280    	; 0x1b6 <uart_getchar+0x20>
 2ce:	fe 01       	movw	r30, r28
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	80 81       	ld	r24, Z
 2d4:	80 32       	cpi	r24, 0x20	; 32
 2d6:	59 f7       	brne	.-42     	; 0x2ae <uart_getchar+0x118>
 2d8:	6e cf       	rjmp	.-292    	; 0x1b6 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 2da:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <rxp.2118>
 2de:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <rxp.2118+0x1>
 2e2:	cf 01       	movw	r24, r30
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <rxp.2118+0x1>
 2ea:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <rxp.2118>
 2ee:	80 81       	ld	r24, Z
  if (c == '\n')
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	21 f4       	brne	.+8      	; 0x2fc <uart_getchar+0x166>
    rxp = 0;
 2f4:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <rxp.2118+0x1>
 2f8:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rxp.2118>

  return c;
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <uart_getchar+0x17a>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 300:	8e ef       	ldi	r24, 0xFE	; 254
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	05 c0       	rjmp	.+10     	; 0x310 <uart_getchar+0x17a>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	9f ef       	ldi	r25, 0xFF	; 255
 30a:	02 c0       	rjmp	.+4      	; 0x310 <uart_getchar+0x17a>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
	UBRR0H = (uint8_t) (MYUBRR >> 8);
 31e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (uint8_t) MYUBRR;
 322:	80 e1       	ldi	r24, 0x10	; 16
 324:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
#endif
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (3 << UCSZ00);
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	stdout = stdin = &usart0_str;
 334:	e4 e5       	ldi	r30, 0x54	; 84
 336:	f3 e0       	ldi	r31, 0x03	; 3
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	91 83       	std	Z+1, r25	; 0x01
 33e:	80 83       	st	Z, r24
 340:	93 83       	std	Z+3, r25	; 0x03
 342:	82 83       	std	Z+2, r24	; 0x02
 344:	08 95       	ret

00000346 <uart1_init>:
#define BAUD 9600
#define MYUBRR (FOSC/16/BAUD-1)

void uart1_init (void) {
	// set baud rate
	UBRR1H = (unsigned char)(MYUBRR>>8);
 346:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UBRR1L = (unsigned char)MYUBRR;
 34a:	87 e6       	ldi	r24, 0x67	; 103
 34c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	
	// enable
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1 << RXCIE1);;
 350:	88 e9       	ldi	r24, 0x98	; 152
 352:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 35c:	08 95       	ret

0000035e <uart1_tx_char>:
}

void uart1_tx_char(char c) {
	loop_until_bit_is_set(UCSR1A, UDRE1);
 35e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 362:	95 ff       	sbrs	r25, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <uart1_tx_char>
	UDR1 = c;
 366:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 36a:	08 95       	ret

0000036c <uart1_tx_string>:
}

void uart1_tx_string(char str[]) {
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(str); i++) {
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	06 c0       	rjmp	.+12     	; 0x388 <uart1_tx_string+0x1c>
		uart1_tx_char(str[i]);
 37c:	f8 01       	movw	r30, r16
 37e:	ec 0f       	add	r30, r28
 380:	fd 1f       	adc	r31, r29
 382:	80 81       	ld	r24, Z
 384:	ec df       	rcall	.-40     	; 0x35e <uart1_tx_char>
	loop_until_bit_is_set(UCSR1A, UDRE1);
	UDR1 = c;
}

void uart1_tx_string(char str[]) {
	for (int i = 0; i < strlen(str); i++) {
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	f8 01       	movw	r30, r16
 38a:	01 90       	ld	r0, Z+
 38c:	00 20       	and	r0, r0
 38e:	e9 f7       	brne	.-6      	; 0x38a <uart1_tx_string+0x1e>
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	e0 1b       	sub	r30, r16
 394:	f1 0b       	sbc	r31, r17
 396:	ce 17       	cp	r28, r30
 398:	df 07       	cpc	r29, r31
 39a:	80 f3       	brcs	.-32     	; 0x37c <uart1_tx_string+0x10>
		uart1_tx_char(str[i]);
	}

	uart1_tx_char('\r');
 39c:	8d e0       	ldi	r24, 0x0D	; 13
 39e:	df df       	rcall	.-66     	; 0x35e <uart1_tx_char>
	uart1_tx_char('\n');
 3a0:	8a e0       	ldi	r24, 0x0A	; 10
 3a2:	dd df       	rcall	.-70     	; 0x35e <uart1_tx_char>
 3a4:	df 91       	pop	r29
}
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <__vector_36>:
 3ae:	1f 92       	push	r1

ISR(USART1_RX_vect) {
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	0b b6       	in	r0, 0x3b	; 59
 3ba:	0f 92       	push	r0
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	DDRB = 0b11111111;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	84 b9       	out	0x04, r24	; 4
	PORTB ^= (1 << PB7);
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	80 58       	subi	r24, 0x80	; 128
 3cc:	85 b9       	out	0x05, r24	; 5
	char data = UDR1;  // Read received data
 3ce:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	rx1_buffer[rx1_write_pos++] = data;
 3d2:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <rx1_write_pos>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	8e 0f       	add	r24, r30
 3da:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <rx1_write_pos>
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ec 52       	subi	r30, 0x2C	; 44
 3e2:	fd 4f       	sbci	r31, 0xFD	; 253
 3e4:	90 83       	st	Z, r25
	if (rx1_write_pos >= RX1_BUFFER_SIZE) {
 3e6:	88 23       	and	r24, r24
 3e8:	14 f4       	brge	.+4      	; 0x3ee <__vector_36+0x40>
		rx1_write_pos = 0;  // Wrap around
 3ea:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <rx1_write_pos>
	}
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	0f 90       	pop	r0
 3f8:	0b be       	out	0x3b, r0	; 59
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <uart1_rx_char>:

char uart1_rx_char(void) {
	char ret = '\0';
	if (rx1_read_pos != rx1_write_pos) {
 404:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <rx1_read_pos>
 408:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <rx1_write_pos>
 40c:	e8 17       	cp	r30, r24
 40e:	69 f0       	breq	.+26     	; 0x42a <uart1_rx_char+0x26>
		ret = rx1_buffer[rx1_read_pos++];
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	9e 0f       	add	r25, r30
 414:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <rx1_read_pos>
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	ec 52       	subi	r30, 0x2C	; 44
 41c:	fd 4f       	sbci	r31, 0xFD	; 253
 41e:	80 81       	ld	r24, Z
		
		if (rx1_read_pos >= RX1_BUFFER_SIZE) {
 420:	99 23       	and	r25, r25
 422:	24 f4       	brge	.+8      	; 0x42c <uart1_rx_char+0x28>
			rx1_read_pos = 0;	
 424:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <rx1_read_pos>
 428:	08 95       	ret
		rx1_write_pos = 0;  // Wrap around
	}
}

char uart1_rx_char(void) {
	char ret = '\0';
 42a:	80 e0       	ldi	r24, 0x00	; 0
			rx1_read_pos = 0;	
		}
	}
	
	return ret;
}
 42c:	08 95       	ret

0000042e <uart1_rx_string>:

const uint8_t* uart1_rx_string(void) {
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
	int cntr = 0;
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	d0 e0       	ldi	r29, 0x00	; 0
	static uint8_t buf[100];
	while (1) {
		uint8_t a;
		a = uart1_rx_char();
 436:	e6 df       	rcall	.-52     	; 0x404 <uart1_rx_char>
		
		if (a == 0) {
 438:	88 23       	and	r24, r24
 43a:	e9 f3       	breq	.-6      	; 0x436 <uart1_rx_string+0x8>
			continue;
		}
		else if (a == 10 || a == '\r' || a == 13) {
 43c:	8a 30       	cpi	r24, 0x0A	; 10
 43e:	41 f0       	breq	.+16     	; 0x450 <uart1_rx_string+0x22>
 440:	8d 30       	cpi	r24, 0x0D	; 13
 442:	31 f0       	breq	.+12     	; 0x450 <uart1_rx_string+0x22>
			break;
		}
		else {
			// printf("%d\r\n", a);
			buf[cntr++] = a;
 444:	fe 01       	movw	r30, r28
 446:	e2 59       	subi	r30, 0x92	; 146
 448:	fd 4f       	sbci	r31, 0xFD	; 253
 44a:	80 83       	st	Z, r24
 44c:	21 96       	adiw	r28, 0x01	; 1
 44e:	f3 cf       	rjmp	.-26     	; 0x436 <uart1_rx_string+0x8>
		}
	}
	
	return buf;
}
 450:	8e e6       	ldi	r24, 0x6E	; 110
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <fwrite>:
 45a:	8f 92       	push	r8
 45c:	9f 92       	push	r9
 45e:	af 92       	push	r10
 460:	bf 92       	push	r11
 462:	cf 92       	push	r12
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	5b 01       	movw	r10, r22
 474:	4a 01       	movw	r8, r20
 476:	79 01       	movw	r14, r18
 478:	d9 01       	movw	r26, r18
 47a:	13 96       	adiw	r26, 0x03	; 3
 47c:	2c 91       	ld	r18, X
 47e:	21 ff       	sbrs	r18, 1
 480:	1d c0       	rjmp	.+58     	; 0x4bc <fwrite+0x62>
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
 486:	c8 15       	cp	r28, r8
 488:	d9 05       	cpc	r29, r9
 48a:	d9 f0       	breq	.+54     	; 0x4c2 <fwrite+0x68>
 48c:	8c 01       	movw	r16, r24
 48e:	6c 01       	movw	r12, r24
 490:	ca 0c       	add	r12, r10
 492:	db 1c       	adc	r13, r11
 494:	c8 01       	movw	r24, r16
 496:	0c 15       	cp	r16, r12
 498:	1d 05       	cpc	r17, r13
 49a:	71 f0       	breq	.+28     	; 0x4b8 <fwrite+0x5e>
 49c:	0f 5f       	subi	r16, 0xFF	; 255
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	d7 01       	movw	r26, r14
 4a2:	18 96       	adiw	r26, 0x08	; 8
 4a4:	ed 91       	ld	r30, X+
 4a6:	fc 91       	ld	r31, X
 4a8:	19 97       	sbiw	r26, 0x09	; 9
 4aa:	b7 01       	movw	r22, r14
 4ac:	dc 01       	movw	r26, r24
 4ae:	8c 91       	ld	r24, X
 4b0:	19 95       	eicall
 4b2:	89 2b       	or	r24, r25
 4b4:	79 f3       	breq	.-34     	; 0x494 <fwrite+0x3a>
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <fwrite+0x68>
 4b8:	21 96       	adiw	r28, 0x01	; 1
 4ba:	e5 cf       	rjmp	.-54     	; 0x486 <fwrite+0x2c>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <fwrite+0x6a>
 4c2:	ce 01       	movw	r24, r28
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	bf 90       	pop	r11
 4d6:	af 90       	pop	r10
 4d8:	9f 90       	pop	r9
 4da:	8f 90       	pop	r8
 4dc:	08 95       	ret

000004de <printf>:
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	ae 01       	movw	r20, r28
 4e8:	4a 5f       	subi	r20, 0xFA	; 250
 4ea:	5f 4f       	sbci	r21, 0xFF	; 255
 4ec:	fa 01       	movw	r30, r20
 4ee:	61 91       	ld	r22, Z+
 4f0:	71 91       	ld	r23, Z+
 4f2:	af 01       	movw	r20, r30
 4f4:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <__iob+0x2>
 4f8:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <__iob+0x3>
 4fc:	03 d0       	rcall	.+6      	; 0x504 <vfprintf>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <vfprintf>:
 504:	2f 92       	push	r2
 506:	3f 92       	push	r3
 508:	4f 92       	push	r4
 50a:	5f 92       	push	r5
 50c:	6f 92       	push	r6
 50e:	7f 92       	push	r7
 510:	8f 92       	push	r8
 512:	9f 92       	push	r9
 514:	af 92       	push	r10
 516:	bf 92       	push	r11
 518:	cf 92       	push	r12
 51a:	df 92       	push	r13
 51c:	ef 92       	push	r14
 51e:	ff 92       	push	r15
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	2b 97       	sbiw	r28, 0x0b	; 11
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	6c 01       	movw	r12, r24
 53a:	7b 01       	movw	r14, r22
 53c:	8a 01       	movw	r16, r20
 53e:	fc 01       	movw	r30, r24
 540:	17 82       	std	Z+7, r1	; 0x07
 542:	16 82       	std	Z+6, r1	; 0x06
 544:	83 81       	ldd	r24, Z+3	; 0x03
 546:	81 ff       	sbrs	r24, 1
 548:	bf c1       	rjmp	.+894    	; 0x8c8 <vfprintf+0x3c4>
 54a:	ce 01       	movw	r24, r28
 54c:	01 96       	adiw	r24, 0x01	; 1
 54e:	3c 01       	movw	r6, r24
 550:	f6 01       	movw	r30, r12
 552:	93 81       	ldd	r25, Z+3	; 0x03
 554:	f7 01       	movw	r30, r14
 556:	93 fd       	sbrc	r25, 3
 558:	85 91       	lpm	r24, Z+
 55a:	93 ff       	sbrs	r25, 3
 55c:	81 91       	ld	r24, Z+
 55e:	7f 01       	movw	r14, r30
 560:	88 23       	and	r24, r24
 562:	09 f4       	brne	.+2      	; 0x566 <vfprintf+0x62>
 564:	ad c1       	rjmp	.+858    	; 0x8c0 <vfprintf+0x3bc>
 566:	85 32       	cpi	r24, 0x25	; 37
 568:	39 f4       	brne	.+14     	; 0x578 <vfprintf+0x74>
 56a:	93 fd       	sbrc	r25, 3
 56c:	85 91       	lpm	r24, Z+
 56e:	93 ff       	sbrs	r25, 3
 570:	81 91       	ld	r24, Z+
 572:	7f 01       	movw	r14, r30
 574:	85 32       	cpi	r24, 0x25	; 37
 576:	21 f4       	brne	.+8      	; 0x580 <vfprintf+0x7c>
 578:	b6 01       	movw	r22, r12
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	d6 d1       	rcall	.+940    	; 0x92a <fputc>
 57e:	e8 cf       	rjmp	.-48     	; 0x550 <vfprintf+0x4c>
 580:	91 2c       	mov	r9, r1
 582:	21 2c       	mov	r2, r1
 584:	31 2c       	mov	r3, r1
 586:	ff e1       	ldi	r31, 0x1F	; 31
 588:	f3 15       	cp	r31, r3
 58a:	d8 f0       	brcs	.+54     	; 0x5c2 <vfprintf+0xbe>
 58c:	8b 32       	cpi	r24, 0x2B	; 43
 58e:	79 f0       	breq	.+30     	; 0x5ae <vfprintf+0xaa>
 590:	38 f4       	brcc	.+14     	; 0x5a0 <vfprintf+0x9c>
 592:	80 32       	cpi	r24, 0x20	; 32
 594:	79 f0       	breq	.+30     	; 0x5b4 <vfprintf+0xb0>
 596:	83 32       	cpi	r24, 0x23	; 35
 598:	a1 f4       	brne	.+40     	; 0x5c2 <vfprintf+0xbe>
 59a:	23 2d       	mov	r18, r3
 59c:	20 61       	ori	r18, 0x10	; 16
 59e:	1d c0       	rjmp	.+58     	; 0x5da <vfprintf+0xd6>
 5a0:	8d 32       	cpi	r24, 0x2D	; 45
 5a2:	61 f0       	breq	.+24     	; 0x5bc <vfprintf+0xb8>
 5a4:	80 33       	cpi	r24, 0x30	; 48
 5a6:	69 f4       	brne	.+26     	; 0x5c2 <vfprintf+0xbe>
 5a8:	23 2d       	mov	r18, r3
 5aa:	21 60       	ori	r18, 0x01	; 1
 5ac:	16 c0       	rjmp	.+44     	; 0x5da <vfprintf+0xd6>
 5ae:	83 2d       	mov	r24, r3
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	38 2e       	mov	r3, r24
 5b4:	e3 2d       	mov	r30, r3
 5b6:	e4 60       	ori	r30, 0x04	; 4
 5b8:	3e 2e       	mov	r3, r30
 5ba:	2a c0       	rjmp	.+84     	; 0x610 <vfprintf+0x10c>
 5bc:	f3 2d       	mov	r31, r3
 5be:	f8 60       	ori	r31, 0x08	; 8
 5c0:	1d c0       	rjmp	.+58     	; 0x5fc <vfprintf+0xf8>
 5c2:	37 fc       	sbrc	r3, 7
 5c4:	2d c0       	rjmp	.+90     	; 0x620 <vfprintf+0x11c>
 5c6:	20 ed       	ldi	r18, 0xD0	; 208
 5c8:	28 0f       	add	r18, r24
 5ca:	2a 30       	cpi	r18, 0x0A	; 10
 5cc:	40 f0       	brcs	.+16     	; 0x5de <vfprintf+0xda>
 5ce:	8e 32       	cpi	r24, 0x2E	; 46
 5d0:	b9 f4       	brne	.+46     	; 0x600 <vfprintf+0xfc>
 5d2:	36 fc       	sbrc	r3, 6
 5d4:	75 c1       	rjmp	.+746    	; 0x8c0 <vfprintf+0x3bc>
 5d6:	23 2d       	mov	r18, r3
 5d8:	20 64       	ori	r18, 0x40	; 64
 5da:	32 2e       	mov	r3, r18
 5dc:	19 c0       	rjmp	.+50     	; 0x610 <vfprintf+0x10c>
 5de:	36 fe       	sbrs	r3, 6
 5e0:	06 c0       	rjmp	.+12     	; 0x5ee <vfprintf+0xea>
 5e2:	8a e0       	ldi	r24, 0x0A	; 10
 5e4:	98 9e       	mul	r9, r24
 5e6:	20 0d       	add	r18, r0
 5e8:	11 24       	eor	r1, r1
 5ea:	92 2e       	mov	r9, r18
 5ec:	11 c0       	rjmp	.+34     	; 0x610 <vfprintf+0x10c>
 5ee:	ea e0       	ldi	r30, 0x0A	; 10
 5f0:	2e 9e       	mul	r2, r30
 5f2:	20 0d       	add	r18, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	22 2e       	mov	r2, r18
 5f8:	f3 2d       	mov	r31, r3
 5fa:	f0 62       	ori	r31, 0x20	; 32
 5fc:	3f 2e       	mov	r3, r31
 5fe:	08 c0       	rjmp	.+16     	; 0x610 <vfprintf+0x10c>
 600:	8c 36       	cpi	r24, 0x6C	; 108
 602:	21 f4       	brne	.+8      	; 0x60c <vfprintf+0x108>
 604:	83 2d       	mov	r24, r3
 606:	80 68       	ori	r24, 0x80	; 128
 608:	38 2e       	mov	r3, r24
 60a:	02 c0       	rjmp	.+4      	; 0x610 <vfprintf+0x10c>
 60c:	88 36       	cpi	r24, 0x68	; 104
 60e:	41 f4       	brne	.+16     	; 0x620 <vfprintf+0x11c>
 610:	f7 01       	movw	r30, r14
 612:	93 fd       	sbrc	r25, 3
 614:	85 91       	lpm	r24, Z+
 616:	93 ff       	sbrs	r25, 3
 618:	81 91       	ld	r24, Z+
 61a:	7f 01       	movw	r14, r30
 61c:	81 11       	cpse	r24, r1
 61e:	b3 cf       	rjmp	.-154    	; 0x586 <vfprintf+0x82>
 620:	98 2f       	mov	r25, r24
 622:	9f 7d       	andi	r25, 0xDF	; 223
 624:	95 54       	subi	r25, 0x45	; 69
 626:	93 30       	cpi	r25, 0x03	; 3
 628:	28 f4       	brcc	.+10     	; 0x634 <vfprintf+0x130>
 62a:	0c 5f       	subi	r16, 0xFC	; 252
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	9f e3       	ldi	r25, 0x3F	; 63
 630:	99 83       	std	Y+1, r25	; 0x01
 632:	0d c0       	rjmp	.+26     	; 0x64e <vfprintf+0x14a>
 634:	83 36       	cpi	r24, 0x63	; 99
 636:	31 f0       	breq	.+12     	; 0x644 <vfprintf+0x140>
 638:	83 37       	cpi	r24, 0x73	; 115
 63a:	71 f0       	breq	.+28     	; 0x658 <vfprintf+0x154>
 63c:	83 35       	cpi	r24, 0x53	; 83
 63e:	09 f0       	breq	.+2      	; 0x642 <vfprintf+0x13e>
 640:	55 c0       	rjmp	.+170    	; 0x6ec <vfprintf+0x1e8>
 642:	20 c0       	rjmp	.+64     	; 0x684 <vfprintf+0x180>
 644:	f8 01       	movw	r30, r16
 646:	80 81       	ld	r24, Z
 648:	89 83       	std	Y+1, r24	; 0x01
 64a:	0e 5f       	subi	r16, 0xFE	; 254
 64c:	1f 4f       	sbci	r17, 0xFF	; 255
 64e:	88 24       	eor	r8, r8
 650:	83 94       	inc	r8
 652:	91 2c       	mov	r9, r1
 654:	53 01       	movw	r10, r6
 656:	12 c0       	rjmp	.+36     	; 0x67c <vfprintf+0x178>
 658:	28 01       	movw	r4, r16
 65a:	f2 e0       	ldi	r31, 0x02	; 2
 65c:	4f 0e       	add	r4, r31
 65e:	51 1c       	adc	r5, r1
 660:	f8 01       	movw	r30, r16
 662:	a0 80       	ld	r10, Z
 664:	b1 80       	ldd	r11, Z+1	; 0x01
 666:	36 fe       	sbrs	r3, 6
 668:	03 c0       	rjmp	.+6      	; 0x670 <vfprintf+0x16c>
 66a:	69 2d       	mov	r22, r9
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0x170>
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	7f ef       	ldi	r23, 0xFF	; 255
 674:	c5 01       	movw	r24, r10
 676:	4e d1       	rcall	.+668    	; 0x914 <strnlen>
 678:	4c 01       	movw	r8, r24
 67a:	82 01       	movw	r16, r4
 67c:	f3 2d       	mov	r31, r3
 67e:	ff 77       	andi	r31, 0x7F	; 127
 680:	3f 2e       	mov	r3, r31
 682:	15 c0       	rjmp	.+42     	; 0x6ae <vfprintf+0x1aa>
 684:	28 01       	movw	r4, r16
 686:	22 e0       	ldi	r18, 0x02	; 2
 688:	42 0e       	add	r4, r18
 68a:	51 1c       	adc	r5, r1
 68c:	f8 01       	movw	r30, r16
 68e:	a0 80       	ld	r10, Z
 690:	b1 80       	ldd	r11, Z+1	; 0x01
 692:	36 fe       	sbrs	r3, 6
 694:	03 c0       	rjmp	.+6      	; 0x69c <vfprintf+0x198>
 696:	69 2d       	mov	r22, r9
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <vfprintf+0x19c>
 69c:	6f ef       	ldi	r22, 0xFF	; 255
 69e:	7f ef       	ldi	r23, 0xFF	; 255
 6a0:	c5 01       	movw	r24, r10
 6a2:	2d d1       	rcall	.+602    	; 0x8fe <strnlen_P>
 6a4:	4c 01       	movw	r8, r24
 6a6:	f3 2d       	mov	r31, r3
 6a8:	f0 68       	ori	r31, 0x80	; 128
 6aa:	3f 2e       	mov	r3, r31
 6ac:	82 01       	movw	r16, r4
 6ae:	33 fc       	sbrc	r3, 3
 6b0:	19 c0       	rjmp	.+50     	; 0x6e4 <vfprintf+0x1e0>
 6b2:	82 2d       	mov	r24, r2
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	88 16       	cp	r8, r24
 6b8:	99 06       	cpc	r9, r25
 6ba:	a0 f4       	brcc	.+40     	; 0x6e4 <vfprintf+0x1e0>
 6bc:	b6 01       	movw	r22, r12
 6be:	80 e2       	ldi	r24, 0x20	; 32
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	33 d1       	rcall	.+614    	; 0x92a <fputc>
 6c4:	2a 94       	dec	r2
 6c6:	f5 cf       	rjmp	.-22     	; 0x6b2 <vfprintf+0x1ae>
 6c8:	f5 01       	movw	r30, r10
 6ca:	37 fc       	sbrc	r3, 7
 6cc:	85 91       	lpm	r24, Z+
 6ce:	37 fe       	sbrs	r3, 7
 6d0:	81 91       	ld	r24, Z+
 6d2:	5f 01       	movw	r10, r30
 6d4:	b6 01       	movw	r22, r12
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	28 d1       	rcall	.+592    	; 0x92a <fputc>
 6da:	21 10       	cpse	r2, r1
 6dc:	2a 94       	dec	r2
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	82 1a       	sub	r8, r18
 6e2:	91 08       	sbc	r9, r1
 6e4:	81 14       	cp	r8, r1
 6e6:	91 04       	cpc	r9, r1
 6e8:	79 f7       	brne	.-34     	; 0x6c8 <vfprintf+0x1c4>
 6ea:	e1 c0       	rjmp	.+450    	; 0x8ae <vfprintf+0x3aa>
 6ec:	84 36       	cpi	r24, 0x64	; 100
 6ee:	11 f0       	breq	.+4      	; 0x6f4 <vfprintf+0x1f0>
 6f0:	89 36       	cpi	r24, 0x69	; 105
 6f2:	39 f5       	brne	.+78     	; 0x742 <vfprintf+0x23e>
 6f4:	f8 01       	movw	r30, r16
 6f6:	37 fe       	sbrs	r3, 7
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <vfprintf+0x204>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	82 81       	ldd	r24, Z+2	; 0x02
 700:	93 81       	ldd	r25, Z+3	; 0x03
 702:	0c 5f       	subi	r16, 0xFC	; 252
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	08 c0       	rjmp	.+16     	; 0x718 <vfprintf+0x214>
 708:	60 81       	ld	r22, Z
 70a:	71 81       	ldd	r23, Z+1	; 0x01
 70c:	07 2e       	mov	r0, r23
 70e:	00 0c       	add	r0, r0
 710:	88 0b       	sbc	r24, r24
 712:	99 0b       	sbc	r25, r25
 714:	0e 5f       	subi	r16, 0xFE	; 254
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	f3 2d       	mov	r31, r3
 71a:	ff 76       	andi	r31, 0x6F	; 111
 71c:	3f 2e       	mov	r3, r31
 71e:	97 ff       	sbrs	r25, 7
 720:	09 c0       	rjmp	.+18     	; 0x734 <vfprintf+0x230>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	f0 68       	ori	r31, 0x80	; 128
 732:	3f 2e       	mov	r3, r31
 734:	2a e0       	ldi	r18, 0x0A	; 10
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	a3 01       	movw	r20, r6
 73a:	33 d1       	rcall	.+614    	; 0x9a2 <__ultoa_invert>
 73c:	88 2e       	mov	r8, r24
 73e:	86 18       	sub	r8, r6
 740:	44 c0       	rjmp	.+136    	; 0x7ca <vfprintf+0x2c6>
 742:	85 37       	cpi	r24, 0x75	; 117
 744:	31 f4       	brne	.+12     	; 0x752 <vfprintf+0x24e>
 746:	23 2d       	mov	r18, r3
 748:	2f 7e       	andi	r18, 0xEF	; 239
 74a:	b2 2e       	mov	r11, r18
 74c:	2a e0       	ldi	r18, 0x0A	; 10
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	25 c0       	rjmp	.+74     	; 0x79c <vfprintf+0x298>
 752:	93 2d       	mov	r25, r3
 754:	99 7f       	andi	r25, 0xF9	; 249
 756:	b9 2e       	mov	r11, r25
 758:	8f 36       	cpi	r24, 0x6F	; 111
 75a:	c1 f0       	breq	.+48     	; 0x78c <vfprintf+0x288>
 75c:	18 f4       	brcc	.+6      	; 0x764 <vfprintf+0x260>
 75e:	88 35       	cpi	r24, 0x58	; 88
 760:	79 f0       	breq	.+30     	; 0x780 <vfprintf+0x27c>
 762:	ae c0       	rjmp	.+348    	; 0x8c0 <vfprintf+0x3bc>
 764:	80 37       	cpi	r24, 0x70	; 112
 766:	19 f0       	breq	.+6      	; 0x76e <vfprintf+0x26a>
 768:	88 37       	cpi	r24, 0x78	; 120
 76a:	21 f0       	breq	.+8      	; 0x774 <vfprintf+0x270>
 76c:	a9 c0       	rjmp	.+338    	; 0x8c0 <vfprintf+0x3bc>
 76e:	e9 2f       	mov	r30, r25
 770:	e0 61       	ori	r30, 0x10	; 16
 772:	be 2e       	mov	r11, r30
 774:	b4 fe       	sbrs	r11, 4
 776:	0d c0       	rjmp	.+26     	; 0x792 <vfprintf+0x28e>
 778:	fb 2d       	mov	r31, r11
 77a:	f4 60       	ori	r31, 0x04	; 4
 77c:	bf 2e       	mov	r11, r31
 77e:	09 c0       	rjmp	.+18     	; 0x792 <vfprintf+0x28e>
 780:	34 fe       	sbrs	r3, 4
 782:	0a c0       	rjmp	.+20     	; 0x798 <vfprintf+0x294>
 784:	29 2f       	mov	r18, r25
 786:	26 60       	ori	r18, 0x06	; 6
 788:	b2 2e       	mov	r11, r18
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x294>
 78c:	28 e0       	ldi	r18, 0x08	; 8
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	05 c0       	rjmp	.+10     	; 0x79c <vfprintf+0x298>
 792:	20 e1       	ldi	r18, 0x10	; 16
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x298>
 798:	20 e1       	ldi	r18, 0x10	; 16
 79a:	32 e0       	ldi	r19, 0x02	; 2
 79c:	f8 01       	movw	r30, r16
 79e:	b7 fe       	sbrs	r11, 7
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <vfprintf+0x2ac>
 7a2:	60 81       	ld	r22, Z
 7a4:	71 81       	ldd	r23, Z+1	; 0x01
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	93 81       	ldd	r25, Z+3	; 0x03
 7aa:	0c 5f       	subi	r16, 0xFC	; 252
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <vfprintf+0x2b8>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 5f       	subi	r16, 0xFE	; 254
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	a3 01       	movw	r20, r6
 7be:	f1 d0       	rcall	.+482    	; 0x9a2 <__ultoa_invert>
 7c0:	88 2e       	mov	r8, r24
 7c2:	86 18       	sub	r8, r6
 7c4:	fb 2d       	mov	r31, r11
 7c6:	ff 77       	andi	r31, 0x7F	; 127
 7c8:	3f 2e       	mov	r3, r31
 7ca:	36 fe       	sbrs	r3, 6
 7cc:	0d c0       	rjmp	.+26     	; 0x7e8 <vfprintf+0x2e4>
 7ce:	23 2d       	mov	r18, r3
 7d0:	2e 7f       	andi	r18, 0xFE	; 254
 7d2:	a2 2e       	mov	r10, r18
 7d4:	89 14       	cp	r8, r9
 7d6:	58 f4       	brcc	.+22     	; 0x7ee <vfprintf+0x2ea>
 7d8:	34 fe       	sbrs	r3, 4
 7da:	0b c0       	rjmp	.+22     	; 0x7f2 <vfprintf+0x2ee>
 7dc:	32 fc       	sbrc	r3, 2
 7de:	09 c0       	rjmp	.+18     	; 0x7f2 <vfprintf+0x2ee>
 7e0:	83 2d       	mov	r24, r3
 7e2:	8e 7e       	andi	r24, 0xEE	; 238
 7e4:	a8 2e       	mov	r10, r24
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <vfprintf+0x2ee>
 7e8:	b8 2c       	mov	r11, r8
 7ea:	a3 2c       	mov	r10, r3
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <vfprintf+0x2f0>
 7ee:	b8 2c       	mov	r11, r8
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <vfprintf+0x2f0>
 7f2:	b9 2c       	mov	r11, r9
 7f4:	a4 fe       	sbrs	r10, 4
 7f6:	0f c0       	rjmp	.+30     	; 0x816 <vfprintf+0x312>
 7f8:	fe 01       	movw	r30, r28
 7fa:	e8 0d       	add	r30, r8
 7fc:	f1 1d       	adc	r31, r1
 7fe:	80 81       	ld	r24, Z
 800:	80 33       	cpi	r24, 0x30	; 48
 802:	21 f4       	brne	.+8      	; 0x80c <vfprintf+0x308>
 804:	9a 2d       	mov	r25, r10
 806:	99 7e       	andi	r25, 0xE9	; 233
 808:	a9 2e       	mov	r10, r25
 80a:	09 c0       	rjmp	.+18     	; 0x81e <vfprintf+0x31a>
 80c:	a2 fe       	sbrs	r10, 2
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x318>
 810:	b3 94       	inc	r11
 812:	b3 94       	inc	r11
 814:	04 c0       	rjmp	.+8      	; 0x81e <vfprintf+0x31a>
 816:	8a 2d       	mov	r24, r10
 818:	86 78       	andi	r24, 0x86	; 134
 81a:	09 f0       	breq	.+2      	; 0x81e <vfprintf+0x31a>
 81c:	b3 94       	inc	r11
 81e:	a3 fc       	sbrc	r10, 3
 820:	10 c0       	rjmp	.+32     	; 0x842 <vfprintf+0x33e>
 822:	a0 fe       	sbrs	r10, 0
 824:	06 c0       	rjmp	.+12     	; 0x832 <vfprintf+0x32e>
 826:	b2 14       	cp	r11, r2
 828:	80 f4       	brcc	.+32     	; 0x84a <vfprintf+0x346>
 82a:	28 0c       	add	r2, r8
 82c:	92 2c       	mov	r9, r2
 82e:	9b 18       	sub	r9, r11
 830:	0d c0       	rjmp	.+26     	; 0x84c <vfprintf+0x348>
 832:	b2 14       	cp	r11, r2
 834:	58 f4       	brcc	.+22     	; 0x84c <vfprintf+0x348>
 836:	b6 01       	movw	r22, r12
 838:	80 e2       	ldi	r24, 0x20	; 32
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	76 d0       	rcall	.+236    	; 0x92a <fputc>
 83e:	b3 94       	inc	r11
 840:	f8 cf       	rjmp	.-16     	; 0x832 <vfprintf+0x32e>
 842:	b2 14       	cp	r11, r2
 844:	18 f4       	brcc	.+6      	; 0x84c <vfprintf+0x348>
 846:	2b 18       	sub	r2, r11
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x34a>
 84a:	98 2c       	mov	r9, r8
 84c:	21 2c       	mov	r2, r1
 84e:	a4 fe       	sbrs	r10, 4
 850:	0f c0       	rjmp	.+30     	; 0x870 <vfprintf+0x36c>
 852:	b6 01       	movw	r22, r12
 854:	80 e3       	ldi	r24, 0x30	; 48
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	68 d0       	rcall	.+208    	; 0x92a <fputc>
 85a:	a2 fe       	sbrs	r10, 2
 85c:	16 c0       	rjmp	.+44     	; 0x88a <vfprintf+0x386>
 85e:	a1 fc       	sbrc	r10, 1
 860:	03 c0       	rjmp	.+6      	; 0x868 <vfprintf+0x364>
 862:	88 e7       	ldi	r24, 0x78	; 120
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <vfprintf+0x368>
 868:	88 e5       	ldi	r24, 0x58	; 88
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	b6 01       	movw	r22, r12
 86e:	0c c0       	rjmp	.+24     	; 0x888 <vfprintf+0x384>
 870:	8a 2d       	mov	r24, r10
 872:	86 78       	andi	r24, 0x86	; 134
 874:	51 f0       	breq	.+20     	; 0x88a <vfprintf+0x386>
 876:	a1 fe       	sbrs	r10, 1
 878:	02 c0       	rjmp	.+4      	; 0x87e <vfprintf+0x37a>
 87a:	8b e2       	ldi	r24, 0x2B	; 43
 87c:	01 c0       	rjmp	.+2      	; 0x880 <vfprintf+0x37c>
 87e:	80 e2       	ldi	r24, 0x20	; 32
 880:	a7 fc       	sbrc	r10, 7
 882:	8d e2       	ldi	r24, 0x2D	; 45
 884:	b6 01       	movw	r22, r12
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	50 d0       	rcall	.+160    	; 0x92a <fputc>
 88a:	89 14       	cp	r8, r9
 88c:	30 f4       	brcc	.+12     	; 0x89a <vfprintf+0x396>
 88e:	b6 01       	movw	r22, r12
 890:	80 e3       	ldi	r24, 0x30	; 48
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	4a d0       	rcall	.+148    	; 0x92a <fputc>
 896:	9a 94       	dec	r9
 898:	f8 cf       	rjmp	.-16     	; 0x88a <vfprintf+0x386>
 89a:	8a 94       	dec	r8
 89c:	f3 01       	movw	r30, r6
 89e:	e8 0d       	add	r30, r8
 8a0:	f1 1d       	adc	r31, r1
 8a2:	80 81       	ld	r24, Z
 8a4:	b6 01       	movw	r22, r12
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	40 d0       	rcall	.+128    	; 0x92a <fputc>
 8aa:	81 10       	cpse	r8, r1
 8ac:	f6 cf       	rjmp	.-20     	; 0x89a <vfprintf+0x396>
 8ae:	22 20       	and	r2, r2
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <vfprintf+0x3b0>
 8b2:	4e ce       	rjmp	.-868    	; 0x550 <vfprintf+0x4c>
 8b4:	b6 01       	movw	r22, r12
 8b6:	80 e2       	ldi	r24, 0x20	; 32
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	37 d0       	rcall	.+110    	; 0x92a <fputc>
 8bc:	2a 94       	dec	r2
 8be:	f7 cf       	rjmp	.-18     	; 0x8ae <vfprintf+0x3aa>
 8c0:	f6 01       	movw	r30, r12
 8c2:	86 81       	ldd	r24, Z+6	; 0x06
 8c4:	97 81       	ldd	r25, Z+7	; 0x07
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vfprintf+0x3c8>
 8c8:	8f ef       	ldi	r24, 0xFF	; 255
 8ca:	9f ef       	ldi	r25, 0xFF	; 255
 8cc:	2b 96       	adiw	r28, 0x0b	; 11
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	df 90       	pop	r13
 8e6:	cf 90       	pop	r12
 8e8:	bf 90       	pop	r11
 8ea:	af 90       	pop	r10
 8ec:	9f 90       	pop	r9
 8ee:	8f 90       	pop	r8
 8f0:	7f 90       	pop	r7
 8f2:	6f 90       	pop	r6
 8f4:	5f 90       	pop	r5
 8f6:	4f 90       	pop	r4
 8f8:	3f 90       	pop	r3
 8fa:	2f 90       	pop	r2
 8fc:	08 95       	ret

000008fe <strnlen_P>:
 8fe:	fc 01       	movw	r30, r24
 900:	05 90       	lpm	r0, Z+
 902:	61 50       	subi	r22, 0x01	; 1
 904:	70 40       	sbci	r23, 0x00	; 0
 906:	01 10       	cpse	r0, r1
 908:	d8 f7       	brcc	.-10     	; 0x900 <strnlen_P+0x2>
 90a:	80 95       	com	r24
 90c:	90 95       	com	r25
 90e:	8e 0f       	add	r24, r30
 910:	9f 1f       	adc	r25, r31
 912:	08 95       	ret

00000914 <strnlen>:
 914:	fc 01       	movw	r30, r24
 916:	61 50       	subi	r22, 0x01	; 1
 918:	70 40       	sbci	r23, 0x00	; 0
 91a:	01 90       	ld	r0, Z+
 91c:	01 10       	cpse	r0, r1
 91e:	d8 f7       	brcc	.-10     	; 0x916 <strnlen+0x2>
 920:	80 95       	com	r24
 922:	90 95       	com	r25
 924:	8e 0f       	add	r24, r30
 926:	9f 1f       	adc	r25, r31
 928:	08 95       	ret

0000092a <fputc>:
 92a:	0f 93       	push	r16
 92c:	1f 93       	push	r17
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	fb 01       	movw	r30, r22
 934:	23 81       	ldd	r18, Z+3	; 0x03
 936:	21 fd       	sbrc	r18, 1
 938:	03 c0       	rjmp	.+6      	; 0x940 <fputc+0x16>
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	9f ef       	ldi	r25, 0xFF	; 255
 93e:	2c c0       	rjmp	.+88     	; 0x998 <fputc+0x6e>
 940:	22 ff       	sbrs	r18, 2
 942:	16 c0       	rjmp	.+44     	; 0x970 <fputc+0x46>
 944:	46 81       	ldd	r20, Z+6	; 0x06
 946:	57 81       	ldd	r21, Z+7	; 0x07
 948:	24 81       	ldd	r18, Z+4	; 0x04
 94a:	35 81       	ldd	r19, Z+5	; 0x05
 94c:	42 17       	cp	r20, r18
 94e:	53 07       	cpc	r21, r19
 950:	44 f4       	brge	.+16     	; 0x962 <fputc+0x38>
 952:	a0 81       	ld	r26, Z
 954:	b1 81       	ldd	r27, Z+1	; 0x01
 956:	9d 01       	movw	r18, r26
 958:	2f 5f       	subi	r18, 0xFF	; 255
 95a:	3f 4f       	sbci	r19, 0xFF	; 255
 95c:	31 83       	std	Z+1, r19	; 0x01
 95e:	20 83       	st	Z, r18
 960:	8c 93       	st	X, r24
 962:	26 81       	ldd	r18, Z+6	; 0x06
 964:	37 81       	ldd	r19, Z+7	; 0x07
 966:	2f 5f       	subi	r18, 0xFF	; 255
 968:	3f 4f       	sbci	r19, 0xFF	; 255
 96a:	37 83       	std	Z+7, r19	; 0x07
 96c:	26 83       	std	Z+6, r18	; 0x06
 96e:	14 c0       	rjmp	.+40     	; 0x998 <fputc+0x6e>
 970:	8b 01       	movw	r16, r22
 972:	ec 01       	movw	r28, r24
 974:	fb 01       	movw	r30, r22
 976:	00 84       	ldd	r0, Z+8	; 0x08
 978:	f1 85       	ldd	r31, Z+9	; 0x09
 97a:	e0 2d       	mov	r30, r0
 97c:	19 95       	eicall
 97e:	89 2b       	or	r24, r25
 980:	e1 f6       	brne	.-72     	; 0x93a <fputc+0x10>
 982:	d8 01       	movw	r26, r16
 984:	16 96       	adiw	r26, 0x06	; 6
 986:	8d 91       	ld	r24, X+
 988:	9c 91       	ld	r25, X
 98a:	17 97       	sbiw	r26, 0x07	; 7
 98c:	01 96       	adiw	r24, 0x01	; 1
 98e:	17 96       	adiw	r26, 0x07	; 7
 990:	9c 93       	st	X, r25
 992:	8e 93       	st	-X, r24
 994:	16 97       	sbiw	r26, 0x06	; 6
 996:	ce 01       	movw	r24, r28
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	08 95       	ret

000009a2 <__ultoa_invert>:
 9a2:	fa 01       	movw	r30, r20
 9a4:	aa 27       	eor	r26, r26
 9a6:	28 30       	cpi	r18, 0x08	; 8
 9a8:	51 f1       	breq	.+84     	; 0x9fe <__ultoa_invert+0x5c>
 9aa:	20 31       	cpi	r18, 0x10	; 16
 9ac:	81 f1       	breq	.+96     	; 0xa0e <__ultoa_invert+0x6c>
 9ae:	e8 94       	clt
 9b0:	6f 93       	push	r22
 9b2:	6e 7f       	andi	r22, 0xFE	; 254
 9b4:	6e 5f       	subi	r22, 0xFE	; 254
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	af 4f       	sbci	r26, 0xFF	; 255
 9be:	b1 e0       	ldi	r27, 0x01	; 1
 9c0:	3e d0       	rcall	.+124    	; 0xa3e <__ultoa_invert+0x9c>
 9c2:	b4 e0       	ldi	r27, 0x04	; 4
 9c4:	3c d0       	rcall	.+120    	; 0xa3e <__ultoa_invert+0x9c>
 9c6:	67 0f       	add	r22, r23
 9c8:	78 1f       	adc	r23, r24
 9ca:	89 1f       	adc	r24, r25
 9cc:	9a 1f       	adc	r25, r26
 9ce:	a1 1d       	adc	r26, r1
 9d0:	68 0f       	add	r22, r24
 9d2:	79 1f       	adc	r23, r25
 9d4:	8a 1f       	adc	r24, r26
 9d6:	91 1d       	adc	r25, r1
 9d8:	a1 1d       	adc	r26, r1
 9da:	6a 0f       	add	r22, r26
 9dc:	71 1d       	adc	r23, r1
 9de:	81 1d       	adc	r24, r1
 9e0:	91 1d       	adc	r25, r1
 9e2:	a1 1d       	adc	r26, r1
 9e4:	20 d0       	rcall	.+64     	; 0xa26 <__ultoa_invert+0x84>
 9e6:	09 f4       	brne	.+2      	; 0x9ea <__ultoa_invert+0x48>
 9e8:	68 94       	set
 9ea:	3f 91       	pop	r19
 9ec:	2a e0       	ldi	r18, 0x0A	; 10
 9ee:	26 9f       	mul	r18, r22
 9f0:	11 24       	eor	r1, r1
 9f2:	30 19       	sub	r19, r0
 9f4:	30 5d       	subi	r19, 0xD0	; 208
 9f6:	31 93       	st	Z+, r19
 9f8:	de f6       	brtc	.-74     	; 0x9b0 <__ultoa_invert+0xe>
 9fa:	cf 01       	movw	r24, r30
 9fc:	08 95       	ret
 9fe:	46 2f       	mov	r20, r22
 a00:	47 70       	andi	r20, 0x07	; 7
 a02:	40 5d       	subi	r20, 0xD0	; 208
 a04:	41 93       	st	Z+, r20
 a06:	b3 e0       	ldi	r27, 0x03	; 3
 a08:	0f d0       	rcall	.+30     	; 0xa28 <__ultoa_invert+0x86>
 a0a:	c9 f7       	brne	.-14     	; 0x9fe <__ultoa_invert+0x5c>
 a0c:	f6 cf       	rjmp	.-20     	; 0x9fa <__ultoa_invert+0x58>
 a0e:	46 2f       	mov	r20, r22
 a10:	4f 70       	andi	r20, 0x0F	; 15
 a12:	40 5d       	subi	r20, 0xD0	; 208
 a14:	4a 33       	cpi	r20, 0x3A	; 58
 a16:	18 f0       	brcs	.+6      	; 0xa1e <__ultoa_invert+0x7c>
 a18:	49 5d       	subi	r20, 0xD9	; 217
 a1a:	31 fd       	sbrc	r19, 1
 a1c:	40 52       	subi	r20, 0x20	; 32
 a1e:	41 93       	st	Z+, r20
 a20:	02 d0       	rcall	.+4      	; 0xa26 <__ultoa_invert+0x84>
 a22:	a9 f7       	brne	.-22     	; 0xa0e <__ultoa_invert+0x6c>
 a24:	ea cf       	rjmp	.-44     	; 0x9fa <__ultoa_invert+0x58>
 a26:	b4 e0       	ldi	r27, 0x04	; 4
 a28:	a6 95       	lsr	r26
 a2a:	97 95       	ror	r25
 a2c:	87 95       	ror	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	ba 95       	dec	r27
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__ultoa_invert+0x86>
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	61 05       	cpc	r22, r1
 a3a:	71 05       	cpc	r23, r1
 a3c:	08 95       	ret
 a3e:	9b 01       	movw	r18, r22
 a40:	ac 01       	movw	r20, r24
 a42:	0a 2e       	mov	r0, r26
 a44:	06 94       	lsr	r0
 a46:	57 95       	ror	r21
 a48:	47 95       	ror	r20
 a4a:	37 95       	ror	r19
 a4c:	27 95       	ror	r18
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__ultoa_invert+0xa2>
 a52:	62 0f       	add	r22, r18
 a54:	73 1f       	adc	r23, r19
 a56:	84 1f       	adc	r24, r20
 a58:	95 1f       	adc	r25, r21
 a5a:	a0 1d       	adc	r26, r0
 a5c:	08 95       	ret

00000a5e <_exit>:
 a5e:	f8 94       	cli

00000a60 <__stop_program>:
 a60:	ff cf       	rjmp	.-2      	; 0xa60 <__stop_program>
